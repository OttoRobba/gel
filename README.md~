gel
===

An advanced LÖVE snippet system along with syntax highlighting for Gedit.



##What can it do?

The following features are included in it:
- Add brackets around selected word
		gorgeous 	>> ({"['gorgeous']"})
- Input functions & commands through shorthand and tab
		dot + tab	>> love.graphics.point(x, y)
- Edit functions by tabbing through them
		love.graphics.point(you_are_here, y) + tab >>  love.graphics.point(x, now_you_are_here)
- Helpful definitions when using snippets
		nquad + tab >> love.graphics.newQuad(x, y, width, height, width_of_the_reference, height_of_the_reference)
- Run the game from Gedit with a shortcut
		Ctrl+L 	>>  Your_Game :D
- Search LÖVE's wiki in a browser from Gedit with a shortcut
		Select code >> Ctrl+Shift+F 	>>  Wiki Search :D
- Proper LÖVE syntax highlighting

##Installation
###Dependencies
- Snippets Plugin
- External Tools Plugin
Both are available for Gedit 2 and Gedit 3, so this should work on Windows, OSX and Linux.

###How do I run my game from Gedit?
###How do I add LÖVE syntax highlighting?
###How do I install the Snippets?

Install the Snippets plugin in Gedit.
Go to Tool >> Manage Snippets & click the "Import Snippets" button. Find the gel.snippets.xml file you downloaded and press Ok. Should be working now.

##Using the Snippets

Within Gedit, be sure that you have the proper language selected.
Press Ctrl+Spacebar to see all the available snippets.

You will notice there are generally two or four ways a command can be written.
There is regular form, short form, long regular form and long short form.

###Form

This uses the most obvious word from a command. For example:

		point + tab 	>> love.graphics.point(x, y)
		circle + tab 	>> love.graphics.circle(mode, x, y)
		print + tab		>> love.graphics.print(text, x, y)
		
 	 
###Short Form

This uses a three letter abbreviation of the most obvious word from a command. For example:

		poi + tab 		>> love.graphics.point(x, y)
		dot + tab 		>> love.graphics.point(x, y)
		cir + tab 		>> love.graphics.circle(mode,x,y)
		pri + tab		>> love.graphics.print(text, x, y)

Some commands will have more than one short form entry. "dot" and "poi" both result in a point. This is done with words that, through convention, make sense to be shortened in a specific way. Read more on conventions below.

###Long Form

The letter "L", in smallcaps, at the beginning + plus the original long form command.
Not all commands have this but it is useful if you want to add rotation, shearing or other parameters.

		lprint + tab 	>> love.graphics.print(text, x, y, orientation_in_radians, x_scale, y_scale, x_offset, y_offset, x_shearing, y_shearing)
		print + tab >> love.graphics.print(text, x, y)
		
As you can see, quite different.
 	 
###Long Short Form
The letter "L", in smallcaps, at the beginning + the short hand command.
 	 
		lpri + tab 	>> love.graphics.print(text, x, y, orientation_in_radians, x_scale, y_scale, x_offset, y_offset, x_shearing, y_shearing)
	
###Conventions
If the command you want to use involve the word set, as in, setNewFont, the snippet will be either the regular form or the short form + the letter "S", in smallcaps, before it.
In alphabetical order:

		btt >> button
		bg >> background
		c >> color
		dot >> point
		f >> focus
		g >> get
		h >> height
		i >> is
		img >> image
		inv >> invert
		j >> join
		m >> mouse
		n >> new
		pad >> gamepad
		rm >> remove
		s >> set
		sz	>> size
		st	>>	style
		ty >> type 
		w >> width
				
**Examples**

		ncanvas 	>> love.graphics.newCanvas()
		scanvas 	>>	love.graphics.setCanvas()
		gmy		>> love.mouse.getY()
		gc			>> love.graphics.getColor()

**The love.* Conventions**

To avoid any conflicts, an underscore is used before calling general love.* functions (this does not include gamepad and joystick functions):

		_draw >> love.draw()
		_upd 	>> love.update()
		
**Generic Functions Conventions**

It is not possible in Gedit to have a snippet unless it is an exact match. As such, the way to use generic functions such as getWidth() and getHeight() goes like this:


		:gdim >> :getDimensions()

The caret goest back right before the colon so that you can type the variable. Assuming the dollar sign is the caret position:

		:gh$ >> :ge
		Image+space bar >> Image *caret-is-here* >>Image :gdim + tab >> Image *caret-is-here*:getDimension() + backspace >> Image:getDimension()		
		
To avoid any conflicts, generic functions use a colon before them, as it makes sense given that you would normally use it anyway.

		:gdim >> :getDimensions()
		
###Concatenation
In some cases, there is not a single word to describe a function. In this case, we mix different short hands, going for the shorter and more logical route possible.

		gmaxdotsz >> love.graphics.getMaxPointSize()
		glinj >> love.graphics.getLineJoin()

As you can see, we keep the same shorthand as before and add new ones in a logical manner. For instance, what would you write if you want to get the width of a line? The answer is:

		g >> get
		lin >> line
		w >> width
		glinw >> love.graphics.getLineWidth()

Tadam :)

###Exceptions

The following words *use only short form*

		get >> g
		new >> n
		set >> s
		
This is done as to decrease by (almost) half the amount of snippets that needed to be created and because it just plain makes sense.

###Why are some snippets so discriptive? Does this mean I can be lazy?

Never take your loved one for granted. While you should get used to how LÖVE works, it is easy to forget things and so our tools should help us. This also helps newcomers in learning the different functions.

		nparticles	>>	love.graphics.newParticleSystem(image, max_number_of_particles)

Always use the wiki.

##Special Shortcuts

###Encapsulating
Having the code selected, use one of the following shortcuts:

		Ctrl+'	>>	'gorgeous'
		Ctrl+1	>> "gorgeous"
		Ctrl+2	>> (gorgeous)
		Ctrl+3	>> [gorgeous]
		Ctrl+4	>>	{gorgeous}
		
###Running the game
Within any of the .lua files that are used in your game, run the following:

		Ctrl+L

Your game should now be running :)

###Wiki Search
Why you looking at me like that? Ok, fine! This shortcut opens the browser and searches the LÖVE Wiki for the code you had highlighted.

		Ctrl+Shift+F
		
It can also be used to create documentation as you will be able to create a page if there isn't one there already.
		
##Oh my god, so many snippets? WHYYY???
I had two ways that I could go to make this system. I could either have the current system or I could have a system in which words are expanded through snippets and the functions are only revealed with one set of words. Example below:

		Alternative system:
	
		ncanvas + tab	>> newCanvas()
		gwidth + tab	>> :getWidth()
		:gmipmapfilter >> :getMipmapFilter()
		
		Current system:

		ncan + tab 		>> newCanvas()
		ncanvas + tab 	>> newCanvas()
		:gw + tab		>> :getWidth()
		:gwidth + tab	>> :getWidth
		:gmip				>> :getMipmapFilter
		
		
As you can see, I opted for the latter as it is the one fewer conventions and greater flexibility. While the former is cleaner, it is also harder to learn.
I am, however, open to suggestions for a cleaner implementation. 
		

###Hey you cheated! I found something that does not follow the rules!
But I did it out of love!!! :'(

Some functions will be made available with even shorter code or with multiple possible entries. This is natural due to the way that some are closer to abbreviations that we already use. If you have a better idea, however, commit it or go and fork, yourself, the code:)
